version: '3.9'

services:
  crypto_api:
    container_name: crypto_api
    build:
      context: ./api_crypto
      dockerfile: web.Dockerfile
    working_dir: /code
    volumes:
      - ./api_crypto/:/code
    depends_on:
      - redis
    ports:
      - 8080:8080
    environment:
      - WATCHFILES_FORCE_POLLING=true
      - API_KEY=${API_KEY}
    restart: always
    networks:
      - crypto_telethon_net

  redis:
    image: redis:7-alpine
    restart: always
    networks:
      - crypto_telethon_net
    # volumes:
    #   - db_redis

  celery_worker:
    build:
      context: ./api_telegram/
      dockerfile: Dockerfile
    image: celery_worker
    command: /start-celeryworker
    volumes:
      - ./api_telegram/:/code
    restart: always
    depends_on:
      - redis
    environment:
      - API_TG_ID=${API_TG_ID}
      - API_TG_HASH=${API_TG_HASH}
    networks:
      - crypto_telethon_net

  celery_beat:
    build:
      context: ./api_telegram
      dockerfile: Dockerfile
    image: celery_beat
    command: /start-celerybeat
    volumes:
      - ./api_telegram/:/code
    restart: always
    environment:
      - API_TG_ID=${API_TG_ID}
      - API_TG_HASH=${API_TG_HASH}
    depends_on:
      - redis
      - celery_worker
    networks:
      - crypto_telethon_net

  celery_flower:
    build:
      context: ./api_telegram
      dockerfile: Dockerfile
    image: celery_flower
    command: /start-flower
    volumes:
      - ./api_telegram/:/code
    env_file:
      - .env
    ports:
      - 5557:5555
    restart: always
    depends_on:
      - redis
      - celery_worker
    networks:
      - crypto_telethon_net


volumes:
  db_redis:


networks:
  crypto_telethon_net:
    name: cr_tel_net
    driver: bridge